@using System.Globalization
@model WebApp.ViewModels.HomeIndexViewModel

@{
    ViewData["Title"] = "Розклад";
    var selectedDate = Model.SelectedDate;
    var isSunday = selectedDate.DayOfWeek == DayOfWeek.Sunday;
    var workDayStart = isSunday ? 10 : 9;
    var workDayEnd = isSunday ? 16 : 19;
    var timeSlots = new List<string>();
    
    for (int hour = workDayStart; hour < workDayEnd; hour++)
    {
        for (int minute = 0; minute < 60; minute += 15)
        {
            timeSlots.Add($"{hour}:{minute:D2}");
        }
    }
}
<link rel="stylesheet" href="~/css/HomeIndex.css">
<link rel="stylesheet" href="~/css/Calendar.css">
<script src="~/js/HomeIndex.js"></script>
<script src="~/js/Calendar.js"></script>


<div class="schedule-container gap-4 p-4">
    <aside class="calendar-section border rounded shadow-sm p-3 bg-white" style="width: 250px;">
        @{
            var monthOffset = 0;
            if (int.TryParse(Context.Request.Query["monthOffset"], out var offset))
            {
                monthOffset = offset;
            }

            var baseMonth = DateTime.Today.AddMonths(monthOffset);
            var monthsToShow = new[]
            {
                baseMonth.AddMonths(-1),
                baseMonth,
                baseMonth.AddMonths(1)
            };
        }
        <div class="d-flex justify-content-between align-items-center mb-3">
            <button class="btn btn-outline-secondary btn-sm" id="prev-month">&laquo;</button>
            <span class="fw-semibold">@baseMonth.ToString("yyyy")</span>
            <button class="btn btn-outline-secondary btn-sm" id="next-month">&raquo;</button>
        </div>

        @if (ViewData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger" role="alert">
                @ViewData["ErrorMessage"]
            </div>
        }

        @foreach (var month in monthsToShow)
        {
            <div class="month-calendar mb-4">
                <h5 class="text-center mb-2 fw-semibold border-bottom pb-1">@month.ToString("MMMM", CultureInfo.CreateSpecificCulture("uk-UA"))</h5>
                <div class="weekdays-header d-grid grid-template-columns-7 text-center small text-muted mb-1">
                    <div>Пн</div><div>Вт</div><div>Ср</div><div>Чт</div>
                    <div>Пт</div><div>Сб</div><div>Нд</div>
                </div>

                <div class="days-grid d-grid grid-template-columns-7 gap-1 text-center">
                    @{
                        var firstDay = new DateTime(month.Year, month.Month, 1);
                        var startOffset = firstDay.DayOfWeek == DayOfWeek.Sunday ? 6 : (int)firstDay.DayOfWeek - 1;
                        var daysInMonth = DateTime.DaysInMonth(month.Year, month.Month);
                    }

                    @for (int i = 0; i < startOffset; i++)
                    {
                        <div class="empty-day"></div>
                    }

                    @for (int day = 1; day <= daysInMonth; day++)
                    {
                        var date = new DateTime(month.Year, month.Month, day);
                        <div class="day btn btn-light @(date.Date == Model.SelectedDate ? "btn-primary" : "")"
                             data-date="@date.ToString("yyyy-MM-dd")">
                            @day
                        </div>
                    }
                </div>
            </div>
        }
    </aside>
    
    <div class="appointments-table-container" style="flex: 1; position: relative; overflow: auto; height: 80vh;">
        <div class="appointments-table-wrapper">
            <table class="table">
                <colgroup>
                    <col style="width: 80px; position: sticky; left: 0; z-index: 10; background: white;">
                    @foreach (var master in Model.Masters)
                    {
                        <col style="width: 100px; max-width: 100px;">
                    }
                </colgroup>
                <thead>
                    <tr>
                        <th style="position: sticky; top: 0; left: 0; z-index: 20; background: #f8f9fa; height: 30px;">Час</th>
                        @foreach (var master in Model.Masters)
                        {
                            <th style="position: sticky; top: 0; z-index: 15; background: #f8f9fa; max-width: 100px; overflow: hidden; text-overflow: ellipsis; height: 30px;" title="@master.Name">@master.Name</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @{
                        var timeSlotIndex = 0;
                        var processedAppointments = new List<int>();
                    }
                    @while (timeSlotIndex < timeSlots.Count)
                    {
                        var timeSlot = timeSlots[timeSlotIndex];
                        var timeParts = timeSlot.Split(':');
                        var hour = int.Parse(timeParts[0]);
                        var minute = int.Parse(timeParts[1]);
                        var currentTime = new DateTime(selectedDate.Year, selectedDate.Month, selectedDate.Day, hour, minute, 0);
                        
                        <tr style="height: 25px;">
                            <td style="position: sticky; left: 0; z-index: 5; background: white; height: 25px; padding: 2px 8px;">@timeSlot</td>
                            @foreach (var master in Model.Masters)
                            {
                                var appointment = Model.Appointments.FirstOrDefault(a => 
                                    !processedAppointments.Contains(a.Id) &&
                                    a.IdMaster == master.Id && 
                                    a.StartTime == currentTime);
                                
                                if (appointment != null)
                                {
                                    var duration = appointment.EndTime.Subtract(appointment.StartTime).TotalMinutes;
                                    var slotCount = (int)Math.Ceiling(duration / 15.0);
                                    
                                    <td rowspan="@slotCount" class="appointment-cell @(appointment.IsPaid ? "" : "unpaid")" style="min-width: 120px; height: 25px; padding: 2px 8px; @if(appointment.IsPaid) { <text>background-color: #d4edda;</text> } else { <text>background-color: #f8d7da;</text> }" >
                                        <div class="appointment-slot" style="white-space: normal;">
                                            <span style="display: block;" title="@appointment.VisitorName">@appointment.VisitorName</span>
                                            <span>@appointment.StartTime.ToString("HH:mm")-@appointment.EndTime.ToString("HH:mm")</span>
                                            <div class="appointment-actions" style="margin-top: 5px;">
                                                <button class="btn btn-sm btn-primary edit-appointment"
                                                        data-appointment='@Html.Raw(Json.Serialize(appointment))'>
                                                    Редагувати
                                                </button>
                                                <form asp-action="DeleteAppointment" style="display:inline;">
                                                    <input type="hidden" name="id" value="@appointment.Id" />
                                                    <input type="hidden" name="Date" value="@Model.SelectedDate" />
                                                    <button class="btn btn-sm btn-danger" type="submit" onclick="return confirm('Delete this appointment?')">
                                                        Видалити
                                                    </button>
                                                </form>
                                            </div>
                                        </div>
                                    </td>
                                    processedAppointments.Add(appointment.Id);
                                }
                                else if (!Model.Appointments.Any(a => 
                                    a.IdMaster == master.Id && 
                                    currentTime >= a.StartTime && 
                                    currentTime < a.StartTime.AddMinutes(a.EndTime.Subtract(a.StartTime).TotalMinutes)))
                                {
                                    <td style="min-width: 120px; height: 25px; padding: 0; position: relative;">
                                        <label class="time-slot-checkbox">
                                            <input type="checkbox" 
                                                   class="time-slot-input"
                                                   data-master-id="@master.Id" 
                                                   data-time="@hour" 
                                                   data-minute="@minute"
                                                   data-row-index="@timeSlotIndex">
                                            <span class="checkmark"></span>
                                        </label>
                                    </td>
                                }
                            }
                        </tr>
                        timeSlotIndex++;
                    }
                </tbody>
            </table>
        </div>
    </div>
<div id="app-data" 
     data-masters='@Json.Serialize(Model.Masters)'
     data-services='@Json.Serialize(Model.ProvidedServices)'
     data-masterServices='@Json.Serialize(Model.MasterServices)'
     data-selected-date='@selectedDate.ToString("yyyy-MM-dd")'
     data-clients='@Json.Serialize(Model.Clients)'
     style="display: none;"></div>
</div>
